@layout AdminLayout
@page "/admin/writer"


@inject IWriterService _writerService;
@inject IDialogService _dialogService;

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>AdminLTE 3 | Contacts</title>
    <!-- Tell the browser to be responsive to screen width -->
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="web/plugins/fontawesome-free/css/all.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    <!-- overlayScrollbars -->
    <link rel="stylesheet" href="web/dist/css/adminlte.min.css">
    <!-- Google Font: Source Sans Pro -->
    <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700" rel="stylesheet">
</head>
<body class="hold-transition sidebar-mini">
    <!-- /.navbar -->
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Yazarlar Sayfası</h1>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>
    <MudFab Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateWriterDialog"/>
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="card card-solid">
            <div class="card-body pb-0">
                <div class="row d-flex align-items-stretch">
                    @foreach (var writer in writers.Writers)
                    {
                        <div class="col-12 col-sm-6 col-md-3 d-flex align-items-stretch mb-5">
                            <div class="card bg-light">
                                <div class="card-header text-muted border-bottom-0">
                                    @writer.Title
                                </div>
                                <div class="card-body pt-0">
                                    <div class="row">
                                        <div class="col-7">
                                            <h2 class="lead"><b>@($"{writer.FirstName} {writer.LastName}")</b></h2>
                                            <p class="text-muted text-sm"><b>Hakkında: </b> @writer.About </p>
                                            <ul class="ml-4 mb-0 fa-ul text-muted">
                                                <li class="small"><span class="fa-li"><i class="fas fa-lg fa-building"></i></span> Email: @writer.Email</li>
                                            </ul>
                                        </div>
                                        <div class="col-5 text-center">
                                            <img src="web/dist/img/user1-128x128.jpg" alt="" class="img-circle img-fluid">
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="text-right">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="(()=> OpenGetHeadingsByWriterIdDialog(writer.Id))" Color="Color.Tertiary">Yazarın Başlıkları</MudButton>
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.VerifiedUser" OnClick="(()=> OpenUpdateWriterDialog(writer.Id))" Color="Color.Info">Profili Düzenle</MudButton>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <!-- /.card -->
    </section>
    <!-- /.content -->
</body>
</html>

@code {
    ListWriterResponse writers = new();

    protected override async Task OnInitializedAsync()
    {
        await ListWriterAsync();
    }
    async Task ListWriterAsync()
    {
        writers = (await _writerService.GetWriterList(0, 12)).Data;
    }

    async Task OpenCreateWriterDialog()
    {
        var dialog = await _dialogService.ShowAsync<CreateWriterDialog>();
    }

    async Task OpenGetHeadingsByWriterIdDialog(int id)
    {
        DialogParameters parameters = new();
        parameters.Add("Id", id);
        var dialog = await _dialogService.ShowAsync<GetHeadingsByWriterIdDialog>("Başlıklar", parameters);
        await ListWriterAsync();
    }
    async Task OpenUpdateWriterDialog(int id)
    {
        DialogParameters parameters = new();
        parameters.Add("Id", id);
        var dialog = await _dialogService.ShowAsync<UpdateWriterDialog>("Yazar Güncelleme", parameters);
        await ListWriterAsync();
    }
}
